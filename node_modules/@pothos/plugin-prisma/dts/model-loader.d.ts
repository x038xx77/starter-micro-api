import { ObjectRef, SchemaTypes } from '@pothos/core';
import { SelectionState } from './util/selections';
export declare class ModelLoader {
    model: object;
    builder: PothosSchemaTypes.SchemaBuilder<never>;
    findUnique: (model: Record<string, unknown>, ctx: {}) => unknown;
    modelName: string;
    staged: Set<{
        promise: Promise<Record<string, unknown>>;
        state: SelectionState;
    }>;
    constructor(model: object, builder: PothosSchemaTypes.SchemaBuilder<never>, modelName: string, findUnique: (model: Record<string, unknown>, ctx: {}) => unknown);
    static forRef<Types extends SchemaTypes>(ref: ObjectRef<unknown>, modelName: string, findUnique: ((model: Record<string, unknown>, ctx: {}) => unknown) | undefined, builder: PothosSchemaTypes.SchemaBuilder<Types>): import("@pothos/core").ContextCache<ModelLoader, object, []>;
    static getFindUnique(findBy: {
        name: string | null;
        fields: string[];
    } | string): (model: Record<string, unknown>) => {};
    static getDefaultFindBy<Types extends SchemaTypes>(ref: ObjectRef<unknown>, modelName: string, builder: PothosSchemaTypes.SchemaBuilder<Types>): string | {
        name: string | null;
        fields: string[];
    };
    static getDefaultFindUnique<Types extends SchemaTypes>(ref: ObjectRef<unknown>, modelName: string, builder: PothosSchemaTypes.SchemaBuilder<Types>): (model: Record<string, unknown>) => {};
    static getDefaultIDSelection<Types extends SchemaTypes>(ref: ObjectRef<unknown>, modelName: string, builder: PothosSchemaTypes.SchemaBuilder<Types>): Record<string, boolean>;
    static getCursorSelection<Types extends SchemaTypes>(ref: ObjectRef<unknown>, modelName: string, cursor: string, builder: PothosSchemaTypes.SchemaBuilder<Types>): Record<string, boolean>;
    static getFindUniqueForField<Types extends SchemaTypes>(ref: ObjectRef<unknown>, modelName: string, fieldName: string, builder: PothosSchemaTypes.SchemaBuilder<Types>): (model: Record<string, unknown>) => {};
    loadSelection(selection: SelectionState, context: object): Promise<Record<string, unknown>>;
    initLoad(state: SelectionState, context: {}): Promise<Record<string, unknown>>;
}
//# sourceMappingURL=model-loader.d.ts.map