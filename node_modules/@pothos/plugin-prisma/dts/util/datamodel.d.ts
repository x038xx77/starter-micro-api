import { ObjectRef, SchemaTypes } from '@pothos/core';
import { PrismaObjectRef } from '../object-ref';
import { PrismaClient, PrismaDelegate, PrismaModelTypes } from '../types';
export declare const refMap: WeakMap<object, Map<string, PrismaObjectRef<PrismaModelTypes, {}>>>;
export declare const findUniqueMap: WeakMap<object, Map<ObjectRef<unknown, unknown>, ((args: unknown, ctx: {}) => unknown) | null>>;
export declare const includeForRefMap: WeakMap<object, Map<ObjectRef<unknown, unknown>, Record<string, unknown> | null>>;
export declare function getRefFromModel<Types extends SchemaTypes>(name: string, builder: PothosSchemaTypes.SchemaBuilder<Types>): PrismaObjectRef<PrismaModelTypes>;
export declare function getRelation<Types extends SchemaTypes>(name: string, builder: PothosSchemaTypes.SchemaBuilder<Types>, relation: string): import("./get-client").DMMFField;
export declare function getFieldData<Types extends SchemaTypes>(name: string, builder: PothosSchemaTypes.SchemaBuilder<Types>, fieldName: string): import("./get-client").DMMFField;
export declare function getModel<Types extends SchemaTypes>(name: string, builder: PothosSchemaTypes.SchemaBuilder<Types>): {
    name: string;
    fields: import("./get-client").DMMFField[];
    primaryKey: {
        name: string | null;
        fields: string[];
    } | null;
    uniqueIndexes: {
        name: string | null;
        fields: string[];
    }[];
    documentation?: string | undefined;
};
export declare function getDelegateFromModel(client: PrismaClient, model: string): PrismaDelegate;
//# sourceMappingURL=datamodel.d.ts.map