import { createContextCache } from '@pothos/core';
const cache = createContextCache((ctx) => new Map());
export function cacheKey(type, path, subPath) {
    let key = "";
    let current = path;
    while (current) {
        if (typeof current.key === "string") {
            key = key ? `${current.key}.${key}` : current.key;
        }
        current = current.prev;
    }
    for (const entry of subPath) {
        key = `${key}.${entry}`;
    }
    return `${type}@${key}`;
}
export function setLoaderMappings(ctx, info, value) {
    Object.keys(value).forEach((field) => {
        const map = cache(ctx);
        const mapping = value[field];
        const subPath = [
            ...mapping.indirectPath,
            field
        ];
        const key = cacheKey(mapping.type, info.path, subPath);
        map.set(key, mapping.mappings);
    });
}
export function getLoaderMapping(ctx, path, type) {
    const map = cache(ctx);
    const key = cacheKey(type, path, []);
    var ref;
    return (ref = map.get(key)) !== null && ref !== void 0 ? ref : null;
}
//# sourceMappingURL=loader-map.js.map
