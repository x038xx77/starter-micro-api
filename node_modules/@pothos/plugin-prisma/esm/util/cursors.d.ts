import { MaybePromise, SchemaTypes } from '@pothos/core';
export declare function formatCursorChunk(value: unknown): string;
export declare function formatCursor(fields: string | string[]): (value: Record<string, unknown>) => string;
export declare function parseRawCursor(cursor: unknown): unknown;
export declare function parseID(id: string, dataType: string): unknown;
export declare function getDefaultIDSerializer<Types extends SchemaTypes>(modelName: string, fieldName: string, builder: PothosSchemaTypes.SchemaBuilder<Types>): (parent: Record<string, unknown>) => unknown;
export declare function getDefaultIDParser<Types extends SchemaTypes>(modelName: string, fieldName: string, builder: PothosSchemaTypes.SchemaBuilder<Types>): (id: string) => unknown;
export declare function serializeID(id: unknown, dataType: string): string;
export declare function parseCompositeCursor(fields: string[]): (cursor: unknown) => Record<string, unknown>;
export interface PrismaCursorConnectionQueryOptions {
    args: PothosSchemaTypes.DefaultConnectionArguments;
    ctx: {};
    defaultSize?: number | ((args: {}, ctx: {}) => number);
    maxSize?: number | ((args: {}, ctx: {}) => number);
    parseCursor: (cursor: string) => Record<string, unknown>;
}
interface ResolvePrismaCursorConnectionOptions extends PrismaCursorConnectionQueryOptions {
    query: {};
    totalCount?: number | (() => MaybePromise<number>);
}
export declare function prismaCursorConnectionQuery({ args, ctx, maxSize, defaultSize, parseCursor, }: PrismaCursorConnectionQueryOptions): {
    take: number;
    skip: number;
    cursor?: undefined;
} | {
    cursor: Record<string, unknown>;
    take: number;
    skip: number;
};
export declare function wrapConnectionResult<T extends {}>(results: T[], args: PothosSchemaTypes.DefaultConnectionArguments, take: number, cursor: (node: T) => string, totalCount?: number | (() => MaybePromise<number>)): {
    totalCount: number | (() => MaybePromise<number>) | undefined;
    edges: ({
        cursor: string;
        node: T;
    } | null)[];
    pageInfo: {
        startCursor: string | undefined;
        endCursor: string | undefined;
        hasPreviousPage: boolean;
        hasNextPage: boolean;
    };
};
export declare function resolvePrismaCursorConnection<T extends {}>(options: ResolvePrismaCursorConnectionOptions, cursor: (node: T) => string, resolve: (query: {
    include?: {};
    cursor?: {};
    take: number;
    skip: number;
}) => MaybePromise<T[]>): Promise<{
    totalCount: number | (() => MaybePromise<number>) | undefined;
    edges: ({
        cursor: string;
        node: T;
    } | null)[];
    pageInfo: {
        startCursor: string | undefined;
        endCursor: string | undefined;
        hasPreviousPage: boolean;
        hasNextPage: boolean;
    };
}>;
export declare function getCursorFormatter<Types extends SchemaTypes>(name: string, builder: PothosSchemaTypes.SchemaBuilder<Types>, cursor: string): (value: Record<string, unknown>) => string;
export declare function getCursorParser<Types extends SchemaTypes>(name: string, builder: PothosSchemaTypes.SchemaBuilder<Types>, cursor: string): (rawCursor: string) => {
    [x: string]: unknown;
};
export {};
//# sourceMappingURL=cursors.d.ts.map
