import './global-types.js';
import SchemaBuilder, { brandWithType } from '@pothos/core';
import { PrismaObjectFieldBuilder } from './field-builder.js';
import { ModelLoader } from './model-loader.js';
import PrismaNodeRef from './node-ref.js';
import { getDefaultIDParser, getDefaultIDSerializer } from './util/cursors.js';
import { getDelegateFromModel, getRefFromModel } from './util/datamodel.js';
import { getModelDescription } from './util/description.js';
import { getClient, getDMMF } from './util/get-client.js';
import { queryFromInfo } from './util/map-query.js';
import { getRelationMap } from './util/relation-map.js';
const schemaBuilderProto = SchemaBuilder.prototype;
schemaBuilderProto.prismaObject = function prismaObject(type, { fields, findUnique, select, include, description, ...options }) {
    const ref = options.variant ? this.objectRef(options.variant) : getRefFromModel(type, this);
    var _variant, ref1;
    const name = (ref1 = (_variant = options.variant) !== null && _variant !== void 0 ? _variant : options.name) !== null && ref1 !== void 0 ? ref1 : type;
    const fieldMap = getRelationMap(getDMMF(this)).get(type);
    const idSelection = ModelLoader.getDefaultIDSelection(ref, type, this);
    ref.name = name;
    this.objectType(ref, {
        ...options,
        description: getModelDescription(type, this, description),
        extensions: {
            ...options.extensions,
            pothosPrismaInclude: include,
            pothosPrismaModel: type,
            pothosPrismaFieldMap: fieldMap,
            pothosPrismaSelect: select && {
                ...idSelection,
                ...select
            },
            pothosPrismaLoader: ModelLoader.forRef(ref, type, findUnique, this)
        },
        name,
        fields: fields ? () => fields(new PrismaObjectFieldBuilder(name, this, type, getRelationMap(getDMMF(this)).get(type))) : undefined
    });
    return ref;
};
schemaBuilderProto.prismaNode = function prismaNode(type, { id: { field, resolve: rawResolve, ...idOptions }, findUnique: rawFindUnique, name, variant, ...options }) {
    var _obj, ref;
    const fieldName = field;
    const interfaceRef = (ref = (_obj = this).nodeInterfaceRef) === null || ref === void 0 ? void 0 : ref.call(_obj);
    const resolve = rawResolve !== null && rawResolve !== void 0 ? rawResolve : getDefaultIDSerializer(type, fieldName, this);
    const idParser = fieldName ? getDefaultIDParser(type, fieldName, this) : undefined;
    var ref1;
    const typeName = (ref1 = variant !== null && variant !== void 0 ? variant : name) !== null && ref1 !== void 0 ? ref1 : type;
    const nodeRef = new PrismaNodeRef(typeName);
    const findUnique = rawFindUnique ? (parent, context) => rawFindUnique(resolve(parent, context), context) : ModelLoader.getFindUniqueForField(nodeRef, type, fieldName, this);
    if (!interfaceRef) {
        throw new TypeError("builder.prismaNode requires @pothos/plugin-relay to be installed");
    }
    const extendedOptions = {
        ...options,
        variant,
        interfaces: [
            interfaceRef
        ],
        findUnique,
        loadWithoutCache: async (id, context, info) => {
            const query = queryFromInfo({
                context,
                info,
                typeName
            });
            const delegate = getDelegateFromModel(getClient(this, context), type);
            const record = await (delegate.findUniqueOrThrow ? delegate.findUniqueOrThrow({
                ...query,
                where: rawFindUnique ? rawFindUnique(id, context) : {
                    [fieldName]: idParser(id)
                }
            }) : delegate.findUnique({
                ...query,
                rejectOnNotFound: true,
                where: rawFindUnique ? rawFindUnique(id, context) : {
                    [fieldName]: idParser(id)
                }
            }));
            brandWithType(record, typeName);
            return record;
        }
    };
    const ref2 = this.prismaObject(type, extendedOptions);
    if (options.interfaces) {
        this.configStore.addInterfaces(typeName, options.interfaces);
    }
    this.configStore.onTypeConfig(ref2, (nodeConfig) => {
        var ref;
        var ref1;
        this.objectField(ref2, (ref1 = (ref = this.options.relayOptions) === null || ref === void 0 ? void 0 : ref.idFieldName) !== null && ref1 !== void 0 ? ref1 : "id", (t) => {
            var ref;
            return t.globalID({
                ...(ref = this.options.relayOptions) === null || ref === void 0 ? void 0 : ref.idFieldOptions,
                ...idOptions,
                nullable: false,
                args: {},
                resolve: async (parent, args, context, info) => ({
                    type: nodeConfig.name,
                    id: await resolve(parent, context)
                })
            });
        });
    });
    this.configStore.associateRefWithName(nodeRef, typeName);
    return nodeRef;
};
//# sourceMappingURL=schema-builder.js.map
