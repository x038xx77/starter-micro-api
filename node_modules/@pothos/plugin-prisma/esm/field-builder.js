import { RootFieldBuilder } from '@pothos/core';
import { ModelLoader } from './model-loader.js';
import { getCursorFormatter, getCursorParser, resolvePrismaCursorConnection } from './util/cursors.js';
import { getRefFromModel } from './util/datamodel.js';
import { queryFromInfo } from './util/map-query.js';
export * from './prisma-field-builder.js';
const fieldBuilderProto = RootFieldBuilder.prototype;
fieldBuilderProto.prismaField = function prismaField({ type, resolve, ...options }) {
    const modelOrRef = Array.isArray(type) ? type[0] : type;
    const typeRef = typeof modelOrRef === "string" ? getRefFromModel(modelOrRef, this.builder) : modelOrRef;
    const typeParam = Array.isArray(type) ? [
        typeRef
    ] : typeRef;
    return this.field({
        ...options,
        type: typeParam,
        resolve: (parent, args, context, info) => {
            const query = queryFromInfo({
                context,
                info
            });
            return resolve(query, parent, args, context, info);
        }
    });
};
fieldBuilderProto.prismaFieldWithInput = function prismaFieldWithInput({ type, resolve, ...options }) {
    const modelOrRef = Array.isArray(type) ? type[0] : type;
    const typeRef = typeof modelOrRef === "string" ? getRefFromModel(modelOrRef, this.builder) : modelOrRef;
    const typeParam = Array.isArray(type) ? [
        typeRef
    ] : typeRef;
    return this.fieldWithInput({
        ...options,
        type: typeParam,
        resolve: (parent, args, context, info) => {
            const query = queryFromInfo({
                context,
                info
            });
            return resolve(query, parent, args, context, info);
        }
    });
};
fieldBuilderProto.prismaConnection = function prismaConnection({ type, cursor, maxSize, defaultSize, resolve, totalCount, ...options }, connectionOptions = {}, edgeOptions = {}) {
    var ref;
    const ref1 = typeof type === "string" ? getRefFromModel(type, this.builder) : type;
    const typeName = this.builder.configStore.getTypeConfig(ref1).name;
    const model = (ref = this.builder.configStore.getTypeConfig(ref1).extensions) === null || ref === void 0 ? void 0 : ref.pothosPrismaModel;
    const formatCursor = getCursorFormatter(model, this.builder, cursor);
    const parseCursor = getCursorParser(model, this.builder, cursor);
    const cursorSelection = ModelLoader.getCursorSelection(ref1, model, cursor, this.builder);
    const fieldRef = this.connection({
        ...options,
        type: ref1,
        resolve: (parent, args, context, info) => resolvePrismaCursorConnection({
            query: queryFromInfo({
                context,
                info,
                select: cursorSelection
            }),
            ctx: context,
            parseCursor,
            maxSize,
            defaultSize,
            args,
            totalCount: totalCount && (() => totalCount(parent, args, context, info))
        }, formatCursor, (query) => resolve(query, parent, args, context, info))
    }, {
        ...connectionOptions,
        fields: totalCount ? (t) => {
            var ref;
            return {
                totalCount: t.int({
                    nullable: false,
                    resolve: (parent, args, context) => {
                        var ref;
                        return (ref = parent.totalCount) === null || ref === void 0 ? void 0 : ref.call(parent);
                    }
                }),
                ...(ref = connectionOptions.fields) === null || ref === void 0 ? void 0 : ref.call(connectionOptions, t)
            };
        } : connectionOptions.fields,
        extensions: {
            ...connectionOptions === null || connectionOptions === void 0 ? void 0 : connectionOptions.extensions,
            pothosPrismaIndirectInclude: {
                getType: () => typeName,
                path: [
                    {
                        name: "edges"
                    },
                    {
                        name: "node"
                    }
                ]
            }
        }
    }, edgeOptions);
    return fieldRef;
};
//# sourceMappingURL=field-builder.js.map
