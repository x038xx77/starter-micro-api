"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    refMap: ()=>refMap,
    findUniqueMap: ()=>findUniqueMap,
    includeForRefMap: ()=>includeForRefMap,
    getRefFromModel: ()=>getRefFromModel,
    getRelation: ()=>getRelation,
    getFieldData: ()=>getFieldData,
    getModel: ()=>getModel,
    getDelegateFromModel: ()=>getDelegateFromModel
});
const _objectRef = require("../object-ref");
const _getClient = require("./get-client");
const refMap = new WeakMap();
const findUniqueMap = new WeakMap();
const includeForRefMap = new WeakMap();
function getRefFromModel(name, builder) {
    if (!refMap.has(builder)) {
        refMap.set(builder, new Map());
    }
    const cache = refMap.get(builder);
    if (!cache.has(name)) {
        cache.set(name, new _objectRef.PrismaObjectRef(name));
    }
    return cache.get(name);
}
function getRelation(name, builder, relation) {
    const fieldData = getFieldData(name, builder, relation);
    if (fieldData.kind !== 'object') {
        throw new Error(`Field ${relation} of model '${name}' is not a relation (${fieldData.kind})`);
    }
    return fieldData;
}
function getFieldData(name, builder, fieldName) {
    const modelData = getModel(name, builder);
    const fieldData = modelData.fields.find((field)=>field.name === fieldName);
    if (!fieldData) {
        throw new Error(`Field '${fieldName}' not found in model '${name}'`);
    }
    return fieldData;
}
function getModel(name, builder) {
    const dmmf = (0, _getClient.getDMMF)(builder);
    const modelData = dmmf.datamodel.models.find((model)=>model.name === name);
    if (!modelData) {
        throw new Error(`Model '${name}' not found in DMMF`);
    }
    return modelData;
}
function getDelegateFromModel(client, model) {
    const lowerCase = `${model.slice(0, 1).toLowerCase()}${model.slice(1)}`;
    const delegate = lowerCase in client ? client[lowerCase] : null;
    if (!delegate) {
        throw new Error(`Unable to find delegate for model ${model}`);
    }
    return delegate;
}

//# sourceMappingURL=datamodel.js.map