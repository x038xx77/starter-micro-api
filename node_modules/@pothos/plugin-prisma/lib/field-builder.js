"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _core = require("@pothos/core");
const _modelLoader = require("./model-loader");
const _cursors = require("./util/cursors");
const _datamodel = require("./util/datamodel");
const _mapQuery = require("./util/map-query");
_exportStar(require("./prisma-field-builder"), exports);
function _exportStar(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) Object.defineProperty(to, k, {
            enumerable: true,
            get: function() {
                return from[k];
            }
        });
    });
    return from;
}
const fieldBuilderProto = _core.RootFieldBuilder.prototype;
fieldBuilderProto.prismaField = function prismaField({ type , resolve , ...options }) {
    const modelOrRef = Array.isArray(type) ? type[0] : type;
    const typeRef = typeof modelOrRef === 'string' ? (0, _datamodel.getRefFromModel)(modelOrRef, this.builder) : modelOrRef;
    const typeParam = Array.isArray(type) ? [
        typeRef
    ] : typeRef;
    return this.field({
        ...options,
        type: typeParam,
        resolve: (parent, args, context, info)=>{
            const query = (0, _mapQuery.queryFromInfo)({
                context,
                info
            });
            return resolve(query, parent, args, context, info);
        }
    });
};
fieldBuilderProto.prismaFieldWithInput = function prismaFieldWithInput({ type , resolve , ...options }) {
    const modelOrRef = Array.isArray(type) ? type[0] : type;
    const typeRef = typeof modelOrRef === 'string' ? (0, _datamodel.getRefFromModel)(modelOrRef, this.builder) : modelOrRef;
    const typeParam = Array.isArray(type) ? [
        typeRef
    ] : typeRef;
    return this.fieldWithInput({
        ...options,
        type: typeParam,
        resolve: (parent, args, context, info)=>{
            const query = (0, _mapQuery.queryFromInfo)({
                context,
                info
            });
            return resolve(query, parent, args, context, info);
        }
    });
};
fieldBuilderProto.prismaConnection = function prismaConnection({ type , cursor , maxSize , defaultSize , resolve , totalCount , ...options }, connectionOptions = {}, edgeOptions = {}) {
    var ref;
    const ref1 = typeof type === 'string' ? (0, _datamodel.getRefFromModel)(type, this.builder) : type;
    const typeName = this.builder.configStore.getTypeConfig(ref1).name;
    const model = (ref = this.builder.configStore.getTypeConfig(ref1).extensions) === null || ref === void 0 ? void 0 : ref.pothosPrismaModel;
    const formatCursor = (0, _cursors.getCursorFormatter)(model, this.builder, cursor);
    const parseCursor = (0, _cursors.getCursorParser)(model, this.builder, cursor);
    const cursorSelection = _modelLoader.ModelLoader.getCursorSelection(ref1, model, cursor, this.builder);
    const fieldRef = this.connection({
        ...options,
        type: ref1,
        resolve: (parent, args, context, info)=>(0, _cursors.resolvePrismaCursorConnection)({
                query: (0, _mapQuery.queryFromInfo)({
                    context,
                    info,
                    select: cursorSelection
                }),
                ctx: context,
                parseCursor,
                maxSize,
                defaultSize,
                args,
                totalCount: totalCount && (()=>totalCount(parent, args, context, info))
            }, formatCursor, (query)=>resolve(query, parent, args, context, info))
    }, {
        ...connectionOptions,
        fields: totalCount ? (t)=>{
            var ref;
            return {
                totalCount: t.int({
                    nullable: false,
                    resolve: (parent, args, context)=>{
                        var ref;
                        return (ref = parent.totalCount) === null || ref === void 0 ? void 0 : ref.call(parent);
                    }
                }),
                ...(ref = connectionOptions.fields) === null || ref === void 0 ? void 0 : ref.call(connectionOptions, t)
            };
        } : connectionOptions.fields,
        extensions: {
            ...connectionOptions === null || connectionOptions === void 0 ? void 0 : connectionOptions.extensions,
            pothosPrismaIndirectInclude: {
                getType: ()=>typeName,
                path: [
                    {
                        name: 'edges'
                    },
                    {
                        name: 'node'
                    }
                ]
            }
        }
    }, edgeOptions);
    return fieldRef;
};

//# sourceMappingURL=field-builder.js.map