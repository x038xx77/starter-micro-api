"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    default: ()=>_default,
    queryFromInfo: ()=>_mapQuery.queryFromInfo,
    ObjectFieldBuilder: ()=>ObjectFieldBuilder,
    PrismaPlugin: ()=>PrismaPlugin
});
require("./global-types");
require("./schema-builder");
const _core = /*#__PURE__*/ _interopRequireWildcard(require("@pothos/core"));
const _fieldBuilder = require("./field-builder");
const _loaderMap = require("./util/loader-map");
const _mapQuery = require("./util/map-query");
_exportStar(require("./types"), exports);
function _exportStar(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) Object.defineProperty(to, k, {
            enumerable: true,
            get: function() {
                return from[k];
            }
        });
    });
    return from;
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const pluginName = 'prisma';
const _default = pluginName;
const ObjectFieldBuilder = _fieldBuilder.PrismaObjectFieldBuilder;
class PrismaPlugin extends _core.BasePlugin {
    onOutputFieldConfig(fieldConfig) {
        if (fieldConfig.kind === 'PrismaObject' && fieldConfig.pothosOptions.select) {
            const { select  } = fieldConfig.pothosOptions;
            return {
                ...fieldConfig,
                extensions: {
                    ...fieldConfig.extensions,
                    pothosPrismaSelect: typeof select === 'function' ? (args, ctx, nestedQuery)=>({
                            select: select(args, ctx, nestedQuery)
                        }) : select
                }
            };
        }
        return fieldConfig;
    }
    wrapResolve(resolver, fieldConfig) {
        var ref, ref1, ref2, ref3;
        if (fieldConfig.kind !== 'PrismaObject' || !((ref = fieldConfig.extensions) === null || ref === void 0 ? void 0 : ref.pothosPrismaSelect)) {
            return resolver;
        }
        const parentConfig = this.buildCache.getTypeConfig(fieldConfig.parentType, 'Object');
        const loadedCheck = (ref1 = fieldConfig.extensions) === null || ref1 === void 0 ? void 0 : ref1.pothosPrismaLoaded;
        const loaderCache = (ref2 = parentConfig.extensions) === null || ref2 === void 0 ? void 0 : ref2.pothosPrismaLoader;
        const fallback = (ref3 = fieldConfig.extensions) === null || ref3 === void 0 ? void 0 : ref3.pothosPrismaFallback;
        return (parent, args, context, info)=>{
            const mapping = (0, _loaderMap.getLoaderMapping)(context, info.path, info.parentType.name);
            if ((!loadedCheck || loadedCheck(parent)) && mapping) {
                (0, _loaderMap.setLoaderMappings)(context, info, mapping);
                return resolver(parent, args, context, info);
            }
            if (fallback) {
                return fallback((0, _mapQuery.queryFromInfo)({
                    context,
                    info
                }), parent, args, context, info);
            }
            const selectionState = (0, _mapQuery.selectionStateFromInfo)(context, info);
            return loaderCache(parent).loadSelection(selectionState, context).then((result)=>{
                const mappings = selectionState.mappings[info.path.key];
                if (mappings) {
                    (0, _loaderMap.setLoaderMappings)(context, info, mappings.mappings);
                }
                return resolver(result, args, context, info);
            });
        };
    }
    constructor(cache){
        super(cache, pluginName);
    }
}
_core.default.registerPlugin(pluginName, PrismaPlugin);

//# sourceMappingURL=index.js.map